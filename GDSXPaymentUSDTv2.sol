// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

/**
 * üí∞ GDSXPaymentUSDT v2
 * ---------------------------------------------
 * ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç GDSX ‡∏î‡πâ‡∏ß‡∏¢ USDT (BEP-20)
 * ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÇ‡∏≠‡∏ô USDT ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á (treasury)
 * ‚úÖ ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏≠‡∏ô GDSX ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
 * 
 * üåü ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
 * 1. ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á Approve USDT ‡∏Å‡πà‡∏≠‡∏ô
 *    USDT.approve(contractAddress, amount);
 * 
 * 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠:
 *    buyGDSX(amount);
 * 
 * üè¶ Owner ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
 * - setRate()     ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
 * - setTreasury() ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö USDT
 * 
 * üîó Contract Address:
 *    0x9E8f57E617c1520FD55A0B732C835EAC73a40F34
 * 
 * ¬© 2025 GDSX Project | Gold Digital System X
 */

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract GDSXPaymentUSDTv2 is Ownable {
    IERC20 public immutable usdt;   // Token USDT (BEP-20)
    IERC20 public immutable gdsx;   // Token GDSX
    address public treasury;        // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö USDT
    uint256 public rate;            // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô GDSX ‡∏ï‡πà‡∏≠ 1 USDT

    event Bought(address indexed buyer, uint256 usdtAmount, uint256 gdsxAmount);

    constructor(
        address _usdt,
        address _gdsx,
        address _treasury,
        uint256 _rate
    ) Ownable(msg.sender) {
        require(_usdt != address(0) && _gdsx != address(0) && _treasury != address(0), "Invalid address");
        usdt = IERC20(_usdt);
        gdsx = IERC20(_gdsx);
        treasury = _treasury;
        rate = _rate;
    }

    // üßÆ ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô GDSX ‡∏ï‡πà‡∏≠ 1 USDT
    function setRate(uint256 _rate) external onlyOwner {
        require(_rate > 0, "Invalid rate");
        rate = _rate;
    }

    // üè¶ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö USDT
    function setTreasury(address _treasury) external onlyOwner {
        require(_treasury != address(0), "Invalid address");
        treasury = _treasury;
    }

    // üíµ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ GDSX ‡∏î‡πâ‡∏ß‡∏¢ USDT
    function buyGDSX(uint256 usdtAmount) external {
        require(usdtAmount > 0, "Amount must > 0");
        require(rate > 0, "Rate not set");

        uint256 gdsxAmount = usdtAmount * rate;

        // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á USDT ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á
        require(usdt.transferFrom(msg.sender, treasury, usdtAmount), "USDT transfer failed");

        // 2Ô∏è‚É£ ‡πÇ‡∏≠‡∏ô GDSX ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        require(gdsx.transfer(msg.sender, gdsxAmount), "GDSX transfer failed");

        emit Bought(msg.sender, usdtAmount, gdsxAmount);
    }
}
